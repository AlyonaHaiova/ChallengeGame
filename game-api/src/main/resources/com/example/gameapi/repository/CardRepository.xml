<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.gameapi.repository.CardRepository">
    <insert id="save" useGeneratedKeys="true" keyColumn="id" keyProperty="entity.id">
        insert into public.cards(
            type_id,
            description,
            points)
        values (#{entity.typeId},
                #{entity.description},
                #{entity.points})
    </insert>

    <update id="update">
        update cards
        set type_id     = #{entity.typeId},
            description = #{entity.description},
            points = #{entity.points}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete
        from cards
        where id = #{id}
    </delete>

    <select id="getRandomCard" resultMap="card">
        select
        c.id as id,
        c.description as description,
        c.points as points,
        ct.title as card_type_title,
        ct.color as card_type_color,
        ct.is_playable as card_type_is_playable,
        ct.is_penalty as card_type_is_penalty,
        r.id as role_id,
        r.title as role_title,
        r.points as role_points
        from cards c
        left join card_types ct on ct.id = c.type_id
        left join cards_roles cr on c.id = cr.card_id
        left join roles r on r.id = cr.role_id
        <if test="isPlayable">
            where ct.is_playable and cr.role_id = #{roleId}
        </if>
        <if test="!isPlayable">
            where ct.is_penalty and cr.role_id = #{roleId}
        </if>
        order by random()
        limit 1
    </select>

    <select id="getAllCardsByGameId" resultMap="card">
        select c.id          as id,
               c.description as description,
               c.points as points,
               ct.title      as card_type_title,
               ct.color      as card_type_color,
               r.id          as role_id,
               r.title       as role_title
        from cards c
                 left join card_types ct on ct.id = c.type_id
                 left join cards_roles cr on c.id = cr.card_id
                 left join roles r on r.id = cr.role_id
        where ct.game_id = #{gameId}
        order by c.id
    </select>

    <resultMap id="card" type="com.example.gameapi.entity.projection.CardProjection">
        <id column="id" property="id"/>
        <result column="description" property="description" />
        <result column="points" property="points" />

        <association property="type" javaType="com.example.gameapi.entity.CardTypeEntity">
            <result column="card_type_title" property="title" />
            <result column="card_type_color" property="color" />
            <result column="card_type_is_playable" property="isPlayable" />
            <result column="card_type_is_penalty" property="isPenalty" />
        </association>

        <association property="role" javaType="com.example.gameapi.entity.RoleEntity">
            <result column="role_id" property="id" />
            <result column="role_title" property="title" />
            <result column="role_points" property="points" />
        </association>

        <collection property="roles" javaType="List" ofType="com.example.gameapi.entity.RoleEntity">
            <result column="role_id" property="id" />
            <result column="role_title" property="title" />
            <result column="role_points" property="points" />
        </collection>
    </resultMap>
</mapper>
